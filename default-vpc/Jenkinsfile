tf_path = "default-vpc"
wait_ssm = 360

pipeline {

   parameters {
    choice(name: 'action', choices: 'create\ndestroy', description: 'Create/update or destroy stack.')
    string(name: 'prefix', defaultValue : 'k3', description: "Prefix for AWS resources so you can create multiple stacks.")
    string(name: 'ec2_key_pair', defaultValue : 'spicysomtam-aws4', description: "k8s node ssh keypair.")
    string(name: 'm_num_servers', defaultValue : '2', description: "Number of master nodes to create (should be > 1).")
    string(name: 'a_num_servers', defaultValue : '2', description: "Number of agent nodes to create.")
    string(name: 'instance_type', defaultValue : 't3a.medium', description: "Instance type for masters and workers")
    booleanParam(name: 'create_bastion', defaultValue : true, description: "Whether to create the bastion server.")
    string(name: 'credential', defaultValue : 'jenkins', description: "Jenkins credential that provides the AWS access key and secret.")
    string(name: 'region', defaultValue : 'eu-west-1', description: "AWS region.")
  }

  options {
    disableConcurrentBuilds()
    timeout(time: 1, unit: 'HOURS')
    withAWS(credentials: params.credential, region: params.region)
    ansiColor('xterm')
  }

  agent { label 'master' }

  stages {

    stage('Setup') {
      steps {
        script {
          if (params.prefix == '') {
            currentBuild.displayName = "#" + env.BUILD_NUMBER + " " + params.action + " UNKNOWN"
            error("Prefix not defined!")
          }

          currentBuild.displayName = "#" + env.BUILD_NUMBER + " " + params.action + " " + params.prefix
          plan = params.prefix + '.plan'
        }
      }
    }

    stage('TF Plan') {
      when {
        expression { params.action == 'create' }
      }
      steps {
        script {
          withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', 
            credentialsId: params.credential, 
            accessKeyVariable: 'AWS_ACCESS_KEY_ID',  
            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {

            sh """
              cd ${tf_path}
              terraform init
              terraform workspace new ${params.prefix} || true
              terraform workspace select ${params.prefix}
              terraform plan \
                -var prefix=${params.prefix} \
                -var m_num_servers=${params.m_num_servers} \
                -var a_num_servers=${params.a_num_servers} \
                -var m_inst_type=${params.instance_type} \
                -var a_inst_type=${params.instance_type} \
                -var bastion_enabled=${params.create_bastion} \
                -var key_pair=${params.ec2_key_pair} \
                -out ${plan}
            """
          }
        }
      }
    }

    stage('TF Apply') {
      when {
        expression { params.action == 'create' }
      }
      steps {
        script {
          input "Create terraform stack ${params.prefix} in aws?" 

          withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', 
            credentialsId: params.credential, 
            accessKeyVariable: 'AWS_ACCESS_KEY_ID',  
            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {

            sh """
              cd ${tf_path}
              terraform apply -input=false -auto-approve ${plan}
            """

            echo "Waiting ${wait_ssm}s for ssm parameter ${params.prefix}-kubeconfig to be created by master0..."
            kc = sh(returnStdout: true, script: """#!/bin/bash +x
              c=0
              i=10
              while [ \$c -lt ${wait_ssm} ]
              do
                kc=\$(aws ssm get-parameter --name ${params.prefix}-kubeconfig --query 'Parameter.Value' --out text 2>/dev/null || true)
                [ ! -z "\$kc" ] && break
                sleep \$i
                c=\$((\$c+\$i))
              done
              echo "\$kc"
            """).trim()

            if (kc == "") {
              error "Unable to get SSM parameter ${params.prefix}-kubeconfig!"
            } else {
              lb = sh(returnStdout: true, script: """#!/bin/bash +x
                cd ${tf_path}
                terraform output lb_dns_name
              """).trim()

              kc=kc.replace('127.0.0.1',lb).replaceAll('default',params.prefix)

              echo "==================================================================================================================================="
              echo "Kubeconfig (SSM parameter ${params.prefix}-kubeconfig):"
              echo "==================================================================================================================================="
              echo kc
              echo "==================================================================================================================================="

              // Update the ssm parameter with the correct url
              echo "Updating SSM parameter ${params.prefix}-kubeconfig with loadbalancer url and prefix..."
              sh """#!/bin/bash +x
                aws ssm put-parameter --name ${params.prefix}-kubeconfig --type String --value "${kc}" --overwrite > /dev/null
              """
            }

          }
        }
      }
    }

    stage('TF Destroy') {
      when {
        expression { params.action == 'destroy' }
      }
      steps {
        script {
          input "Destroy terraform stack ${params.prefix} in aws?" 

          withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', 
            credentialsId: params.credential, 
            accessKeyVariable: 'AWS_ACCESS_KEY_ID',  
            secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {

            sh """
              cd ${tf_path}
              terraform init
              terraform workspace select ${params.prefix}
              terraform destroy -auto-approve

              # delete it if its there
              aws ssm delete-parameter --name ${params.prefix}-kubeconfig 2>/dev/null || true
            """
          }
        }
      }
    }

  }

}